#!/usr/bin/env bash

#set -e
#set -o xtrace

# Variables
LOG_GROUP_NAME="/example/basic/app"
LOG_STREAM_NAME="1720560817"
LOG_FILE="web_server_logs.logs"
SEQUENCE_TOKEN="None"

# Function to send log events
send_log_events() {
  local timestamp=$1
  local message=$2
  echo "$message" > /dev/tty

  # Create a JSON object and add it to an array using jq
  json=$(jq -c -n --arg ts "$timestamp" --arg msg "$message" '[{timestamp: ($ts|tonumber), message: $msg}]')

  if [ "$SEQUENCE_TOKEN" == "None" ]; then
    SEQUENCE_TOKEN=$(aws logs put-log-events \
    --log-group-name "$LOG_GROUP_NAME" \
    --log-stream-name "$LOG_STREAM_NAME" \
    --log-events "$json" \
    --query 'nextSequenceToken' \
    --output text)
  else
    SEQUENCE_TOKEN=$(aws logs put-log-events \
    --log-group-name "$LOG_GROUP_NAME" \
    --log-stream-name "$LOG_STREAM_NAME" \
    --log-events "$json" \
    --sequence-token "$SEQUENCE_TOKEN" \
    --query 'nextSequenceToken' \
    --output text)
  fi

  # Handle errors
  if [ $? -ne 0 ]; then
    echo "Error sending log event"
    exit 1
  fi
}

convert_to_iso() {
  # Input date string
  local date_str="$1"

  # Extract parts of the date
  local day=$(echo $date_str | awk -F'[/: ]' '{print $1}')
  local month=$(echo $date_str | awk -F'[/: ]' '{print $2}')
  local year=$(echo $date_str | awk -F'[/: ]' '{print $3}')
  local time=$(echo $date_str | awk -F'[/: ]' '{print $4 ":" $5 ":" $6}')
  local timezone=$(echo $date_str | awk -F'[+:]' '{print $2 ":" $3}')

  # Convert month to a number
  case $month in
    Jan) month_num="01" ;;
    Feb) month_num="02" ;;
    Mar) month_num="03" ;;
    Apr) month_num="04" ;;
    May) month_num="05" ;;
    Jun) month_num="06" ;;
    Jul) month_num="07" ;;
    Aug) month_num="08" ;;
    Sep) month_num="09" ;;
    Oct) month_num="10" ;;
    Nov) month_num="11" ;;
    Dec) month_num="12" ;;
  esac

  # Format the date as ISO 8601
  local iso_date="${year}-${month_num}-${day}T${time}+${timezone}"

  # Convert to Unix timestamp in milliseconds (CloudWatch requires Unix timestamps in milliseconds)
  local unix_timestamp=$(date -d "$iso_date" +%s%3N)

  # Print the result
  echo "$unix_timestamp"
}

# Main script to read log file and send logs
while IFS= read -r line; do
  echo "$line" > /dev/tty
  original_datetime=$(echo "$line" | awk '{print $4}' | sed 's/\[//g')
  iso_timestamp=$(convert_to_iso "$original_datetime") 

  # Extract the message from the log line, assuming it starts from the 5th field onwards
  message=$(echo "$line" | cut -d' ' -f5-)
  
  # Send the log event
  send_log_events "$iso_timestamp" "$message"
done < "$LOG_FILE"
